import warnings
warnings.filterwarnings("ignore")

import streamlit as st
import numpy as np
import cv2
from tensorflow.keras.models import load_model
from tensorflow.keras.applications.resnet50 import preprocess_input
import json

# ---- Page Config (favicon + title) ----
st.set_page_config(
    page_title="‡¶§‡ßç‡¶¨‡¶ï‡ßá‡¶∞ ‡¶∞‡ßã‡¶ó ‡¶∏‡¶®‡¶æ‡¶ï‡ßç‡¶§‡¶ï‡¶∞‡¶£",   # Browser tab title
    page_icon="ü©∫",               # Use "favicon.png" (place in same folder) OR emoji like "ü©∫"
    layout="centered"
)

# ---- Custom CSS (white background + black text) ----
st.markdown(
    """
    <style>
    .stApp {
        background-color: white;
    }
    html, body, [class*="css"] {
        color: black !important;
    }
    h1, h2, h3, h4, h5, h6, p {
        color: black !important;
    }
    .stFileUploader label, .stButton button {
        color: black !important;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# ---- Load Model ----
model = load_model("my_model.h5")

# ---- Load Label Map ----
with open("label_map.json", "r", encoding="utf-8") as f:
    label_map = json.load(f)
reverse_label_map = {v: k for k, v in label_map.items()}

# ---- ‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ ----
st.markdown(
    "<h1 style='color: black;'>‡¶§‡ßç‡¶¨‡¶ï‡ßá‡¶∞ ‡¶∞‡ßã‡¶ó ‡¶∏‡¶®‡¶æ‡¶ï‡ßç‡¶§‡¶ï‡¶∞‡¶£ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™</h1>",
    unsafe_allow_html=True
)
st.markdown(
    "<p style='color: black;'>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∞‡ßã‡¶ó‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ì ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶§‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡¶¨‡¶≤‡¶¨‡•§</p>",
    unsafe_allow_html=True
)

# ---- ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶°‡¶æ‡¶∞ ----
uploaded_file = st.file_uploader("‡¶õ‡¶¨‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® (jpg/png)", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # ‡¶õ‡¶¨‡¶ø ‡¶™‡¶°‡¶º‡¶æ ‡¶ì ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
    img = cv2.imdecode(file_bytes, 1)  # OpenCV ‡¶è ‡¶õ‡¶¨‡¶ø BGR ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶•‡¶æ‡¶ï‡ßá
    # Show image
    st.image(cv2.cvtColor(img, cv2.COLOR_BGR2RGB), use_container_width=True)

    # Custom black caption
    st.markdown(
        "<p style='color: black; text-align: center;'>‡¶Ü‡¶™‡¶≤‡ßã‡¶°‡¶ï‡ßÉ‡¶§ ‡¶õ‡¶¨‡¶ø</p>",
        unsafe_allow_html=True
    )


    # ‡¶õ‡¶¨‡¶ø ‡¶™‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç
    resized_img = cv2.resize(img, (224, 224))
    input_img = np.expand_dims(resized_img, axis=0)
    input_img = preprocess_input(input_img)

    # ‡¶∞‡ßã‡¶ó ‡¶∂‡¶®‡¶æ‡¶ï‡ßç‡¶§‡¶ï‡¶∞‡¶£
    predictions = model.predict(input_img)
    predicted_index = np.argmax(predictions)
    confidence = float(np.max(predictions))
    predicted_class = reverse_label_map[predicted_index]

    # ---- ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ----
    st.markdown(
        f"<h3 style='color: black;'>‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø ‡¶∞‡ßã‡¶ó: {predicted_class}</h3>",
        unsafe_allow_html=True
    )
    st.markdown(
        f"<h3 style='color: black;'>‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ: {confidence:.2%}</h3>",
        unsafe_allow_html=True
    )            
